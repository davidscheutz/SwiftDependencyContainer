// Template name: AutoSetup
// Template version: 1.0

import SwiftUI
import SwiftDependencyContainer
{% for import in argument.imports %}
import {{ import }}
{% endfor %}

/*
    AutoSetup
*/
{% macro generateDependecyVariable type parent %}
    static var {{ type|lowerFirstLetter }}: {{ type }} { resolve() }
{%- endmacro %}

{% for root in types.based.AutoSetup %}
extension {{ root.name }} {
    private static let shared = {{ root.name }}() // TODO: check for empty constructor
    
    public static var container: DependencyContainer { shared.container }
    
    static func setup() {
    {% if types.based.AutoSetup|count > 1 %}
    fatalError("There can only be one instance implementing 'AutoSetup'!")
    {% endif %}
        let container = shared.container
        
        try! {{ argument.target }}Container.register(using: container)
        {% for import in argument.imports %}
        try! {{ import }}Container.register(using: container)
        {% endfor %}
    
        try! shared.override(container)
 
        try! container.bootstrap()
    }
    
    {% for type in types.all where type.accessLevel == "public" %}

        {% for attribute, objects in type.attributes %}
            {% set additionalTypeInfo %}{{objects[0].description|replace:"@Singleton",""|replace:"(",""|replace:")",""|replace:"isEager:",""|replace:"true",""|replace:"false",""|replace:" ",""}}{% endset %}

            {% if additionaltypeInfo != "" %}
                {% for type in additionalTypeInfo|replace:".self",""|split: ", " %}
                {% call generateDependecyVariable type root.name %}
                {% endfor %}
            {% else %}
                {% if attribute == "Singleton" %}
                    {% call generateDependecyVariable type.name root.name %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    static func resolve<T>() -> T {
        try! container.resolve()
    }
    
    func resolve<T>() -> T {
        {{ root.name }}.resolve()
    }
    
    /// resolves every registered singleton, shouldn't be used in production!
    static func verifyResolvability() throws {
        try {{ argument.target }}Container.verifyResolvability(shared.container)
    {% for import in argument.imports %}
        try {{ import }}Container.verifyResolvability(shared.container)
    {% endfor %}
    }
    
    static func apply<Result: View>(@ViewBuilder context: (Resolver) -> Result) -> some View {
        context(shared)
    }
}
    {% break %}
{% endfor %}
