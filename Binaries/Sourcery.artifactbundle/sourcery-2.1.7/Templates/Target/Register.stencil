// Template name: AutoSetup
// Template version: 1.0

import SwiftDependencyContainer

{% macro addImports %}
{% for import in argument.imports where import != argument.target %}
import {{ import }}
{% endfor %}
{% endmacro %}

{% macro hasTypeInformation description -%}
    {%- if description|replace:"@Singleton",""|replace:"(",""|replace:")",""|replace:"isEager:",""|replace:"true",""|replace:"false",""|replace:" ","" != "" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% macro parseTypes description -%}
    [{{ description|replace:"[",""|replace:"]","" }}]
{%- endmacro %}

public class {{ argument.target }}Container {
    public static func register(using container: DependencyContainer) throws {
    {% for type in types.all %}
        {% for attribute in type.attributes %}
            {% if attribute == "Singleton" %}
        try {{ type.name }}.register(in: container)
            {% endif %}
        {% endfor %}
    {% endfor %}
    }
    
    /// resolves every registered singleton, shouldn't be used in production!
    public static func verifyResolvability(_ container: DependencyContainer) throws {
    {% for type in types.all %}
        {% for attribute, objects in type.attributes %}
        {% if attribute == "Singleton" %}
            {% set hasTypeInformation %}{% call hasTypeInformation objects[0].description %}{% endset %}
            {% if hasTypeInformation == "true" %}
                {% set additionalTypeInfo %}{{objects[0].description|replace:"@Singleton",""|replace:"(",""|replace:")",""|replace:"isEager:",""|replace:"true",""|replace:"false",""|replace:" ",""}}{% endset %}
                {% for type in additionalTypeInfo|split: "," %}
        _ = try container.resolve({{ type }})
                {% endfor %}
            {% else %}
        _ = try container.resolve({{ type.name }}.self)
            {% endif %}
        {% endif %}
        {% endfor %}
    {% endfor %}
    }
}

{% macro generateInitializer initializer %}
    {% if initializer.parameters.count > 0 %}
        {{ type.name }}(
            {% for parameter in initializer.parameters %}
                {% if parameter.typeName.name == "Resolver" %}
            {{ parameter.name }}: container.resolver(){% ifnot forloop.last %}, {% endif %}
                {% else %}
                    {% set isPrimitiveType %}{% call isPrimitiveType parameter %}{% endset %}
                    {% if isPrimitiveType == "true" %}
            {{ parameter.name }}: try $0.resolve("Primitive data types, such as '{{ parameter.typeName }}' aren't currently supported. Please take a look at "){% ifnot forloop.last %}, {% endif %}
                    {% else %}
            {{ parameter.name }}: try $0.resolve(){% ifnot forloop.last %}, {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}
        )
        {% else %}
        {{ type.name }}()
    {% endif %}
{% endmacro %}

{% macro isEager description -%}
    {%- if description|replace:" ",""|contains:"isEager: true" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% macro isPrimitiveType parameter -%}
    {% set typeName %}{{ parameter.unwrappedTypeName }}{% endset %}
    {%- if typeName == "TimeInterval" or typeName == "Double" or typeName == "Float" or typeName == "Date" or typeName == "Bool" or typeName == "Character" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% for type in types.all %}
  {% for attribute, objects in type.attributes %}
    {% if attribute == "Singleton" %}
        {% set hasTypeInformation %}{% call hasTypeInformation objects[0].description %}{% endset %}
    
        {% set additionalTypeInfo %}{{objects[0].description|replace:"@Singleton",""|replace:"(",""|replace:")",""|replace:"isEager:",""|replace:"true",""|replace:"false",""|replace:" ",""}}{% endset %}

{% call addImports %}
{% for import in type.imports where import != argument.target %}
import {{ import }}
{% endfor %}

extension {{ type.name }} {

    {% for initializer in type.allMethods|initializer %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager objects[0].description %}) throws {
        {% if hasTypeInformation == "true" %}
        try container.register({% call parseTypes additionalTypeInfo %}, isEager: isEager) {
        {% call generateInitializer initializer %}
        }
        {% else %}
        try container.register(isEager: isEager) {
        {% call generateInitializer initializer %}
        }
        {% endif %}
    }
        {% break %}
    {% endfor %}
    
    {% if type.allMethods|initializer|count == 0 %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager objects[0].description %}) throws {
        {% if hasTypeInformation == "true" %}
        try container.register({% call parseTypes additionalTypeInfo %}, isEager: isEager) {
    {% call generateInitializer initializer %}
        }
        {% else %}
        try container.register(isEager: isEager) { {{ type.name }}() }
        {% endif %}
    }
    {% endif %}
}
    {% endif %}
  {% endfor %}
{% endfor %}
