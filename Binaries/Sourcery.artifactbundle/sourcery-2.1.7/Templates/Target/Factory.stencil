// Template name: Factory
// Template version: 1.0

{% macro emptyFactory type %}
    public static func create() -> {{ type.name }} {
        {{ type.name }}()
    }
{% endmacro %}

{% macro includeImports type %}
    {% for import in type.imports where import != argument.target %}
import {{ import }}
    {% endfor %}
{% endmacro %}

{% macro initParameters parameters resolver %}
    {% for parameter in parameters %}
        {% if parameter|annotated:"configurable" %}
            {{ parameter.name}}: {{ parameter.name}}{{ ", " if not forloop.last }}
        {% else %}
            {{ parameter.name}}: {{ resolver }}{{ ", " if not forloop.last }}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% for type in types.classes %}
  {% for attribute in type.attributes %}
    {% if attribute == "Factory" %}
        {% call includeImports type %}

extension {{ type.name }} {

    {% if type.allMethods|initializer|count > 1 %}
    // ⚠️ Warning: Generating factory methods for more than one constructor isn't supported at the moment
}
        {% break %}
    {% endif %}
    
    {% if type.allMethods|initializer|count == 0 %}
        {% call emptyFactory type %}
}
        {% break %}
    {% endif %}
    
    {% for initializer in type.allMethods|initializer %}
        {% if initializer.parameters.count == 0 %}
            {% call emptyFactory type %}
            {% break %}
        {% endif %}
    
    {% if types.based.AutoSetup|count == 1 %}
    // Single target project or composition root
    public static func create(
        {% for parameter in initializer.parameters %}
            {{ parameter.name }}: {{ parameter.typeName }}
            {%- for resolvableType in types.all %}
                {%- for resolvableAnnotation, objects in resolvableType.attributes where resolvableAnnotation == "Singleton" %}
                    {%- if types.based.AutoSetup|count == 1 and parameter.asSource|contains:resolvableType.name or objects[0].description|contains:".self" and objects[0].description|contains:parameter.typeName %} = {{ types.based.AutoSetup.first.name }}.resolve(){% endif -%}
                {% endfor -%}
            {% endfor -%}
            {{ ", " if not forloop.last }}
        {% endfor %}
        ) -> {{ type.name }} {
        {{ type.name }}({%- for parameter in initializer.parameters %}{{ parameter.name}}: {{ parameter.name}}{{ ", " if not forloop.last }}{% endfor -%})
    }
    {% else %}
    // Potentially project with multiple targets
    public static func create(
        {% for parameter in initializer.parameters where parameter|annotated:"configurable" %}{{ parameter.name }}: {{ parameter.typeName }},{% endfor %}
        using resolver: Resolver
    ) -> {{ type.name }} {
        {{ type.name }}(
        {% call initParameters initializer.parameters "resolver.resolve()" %}
        )
    }
    
    public static func create(
        {% for parameter in initializer.parameters where parameter|annotated:"configurable" %}{{ parameter.name }}: {{ parameter.typeName }},{% endfor %}
        with container: DependencyContainer
    ) -> {{ type.name }} {
        {{ type.name }}(
        {% call initParameters initializer.parameters "try! container.resolve()" %}
        )
    }
    {% endif %}
        {% break %}
    {% endfor %}
}
    {% endif %}
  {% endfor %}
{% endfor %}
